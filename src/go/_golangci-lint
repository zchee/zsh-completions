#compdef golangci-lint

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright 2025, The zsh-completions Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/golangci/golangci-lint/v2/cmd/golangci-lint@ccf16f7213cc
#
# -------------------------------------------------------------------------------

function _golangci-lint() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  local -a commands
  commands=(
    "cache:Cache control and information"
    "config:Config file information"
    "custom:Build a version of golangci-lint with custom linters"
    "fmt:Format Go source files"
    "formatters:List current formatters configuration"
    "help:Help"
    "linters:List current linters configuration"
    "migrate:Migrate configuration file from v1 to v2"
    "run:Run the linters"
    "version:Version"
  )

  local -a _global_flags
  _global_flags=(
    "--color=[Use color when printing (default \"auto\")]:color mode:(always auto never)"
    {-h,--help}"[Help for a command]"
    {-v,--verbose}"[Verbose output]"
  )

  local -a _linters_
  _linters="($( _call_program linters golangci-lint linters | grep -v -e Enabled -e Disabled | awk -F':' '{print $1}' | sed '/^$/d' ))"
  local -a _formatters
  _formatters="($( _call_program formatters golangci-lint formatters | grep -v -e Enabled -e Disabled | awk -F':' '{print $1}' | sed '/^$/d' ))"

  local -a _all_flags
  _all_flags=(
    "--out-format=[Format of output (default \"colored-line-number\")]:output format:(colored-line-number line-number json tab checkstyle code-climate html junit-xml github-actions)"
    "--print-issued-lines[Print lines of code with issue (default true)]"
    "--print-linter-name [Print linter name in issue line (default true)]"
    "--uniq-by-line[Make issues output unique by line (default true)]"
    "--modules-download-mode=[Modules download mode. If not empty, passed as -mod=<mode> to go tools]:module download mode:(vendor mod readonly)"
    "--issues-exit-code=[Exit code when issues were found (default 1)]:exit code"
    "--build-tags=[Build tags]:build tags"
    "--timeout=[Timeout for total work (default 1m0s)]:deadline duration"
    "--tests[Analyze tests (default true)]"
    "--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]"
    {-c,--config}="[Read config from file path PATH]:config path:_files"
    "--no-config[Don't read config]"
    "--skip-dirs=[Regexps of directories to skip]:skip dir regexp:_directories"
    "--skip-dirs-use-default[Use or not use default excluded directories]"
    "--skip-files=[Regexps of files to skip]:skip file name regexp:_files"
    {-E,--enable}"=[Enable specific linter]:enable linters:(asciicheck bidichk bodyclose containedctx contextcheck cyclop deadcode decorder depguard dogsled dupl durationcheck errcheck errchkjson errname errorlint exhaustive exportloopref forcetypeassert funlen gocognit goconst gocritic gocyclo godot goerr113 gofmt gofumpt goimports gomodguard goprintffuncname grouper ifshort importas ineffassign lll maintidx makezero misspell nakedret nestif nilerr nilnil nlreturn noctx nolintlint paralleltest prealloc predeclared revive rowserrcheck sqlclosecheck structcheck stylecheck tenv thelper tparallel typecheck unconvert unparam varcheck varnamelen wastedassign whitespace wrapcheck exhaustivestruct forbidigo gci gochecknoglobals gochecknoinits godox goheader gomnd gomoddirectives ireturn promlinter tagliatelle testpackage wsl)"
    {-D,--disable}"=[Disable specific linter]:enable linters"
    "--disable-all[Disable all linters]"
    {-p,--presets}"[Enable presets (bugs|complexity|format|performance|style|unused) of linters.]"
    "--fast[Run only fast linters from enabled linters set]"
    {-e,--exclude}"=[Exclude issue by regexp]:exclude regexp pattern"
    "--exclude-use-default[Use or not use default excludes]"
    "--max-issues-per-linter=[Maximum issues count per one linter. Set to 0 to disable (default 50)]:max issues count"
    "--max-same-issues=[Maximum count of issues with the same text. Set to 0 to disable (default 3)]:max count of same issues text"
    {-n,--new}"[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.]"
    "--new-from-rev=[Show only new issues created after git revision REV]:git revision"
    "--new-from-patch=[Show only new issues created in git patch with file path PATH]:git patch file path:_files"
    "--fix[Fix found issues]"
    $_global_flags[@]
  )

  _arguments -C \
    "1: :{_describe 'golangci-lint commands' commands}" \
    "*:: :->args" \
    $_global_flags[@] \
    && ret=0

  case $words[1] in
    cache)
      local -a cache_commands
      cache_commands=(
        "clean:Clean cache"
        "status:Show cache status"
      )

      _arguments \
        "1: :{_describe 'cache commands' cache_commands}" \
        "*:: :->args" \
        $_global_flags[@]

      case $words[1] in
        clean|status)
          _arguments $_global_flags[@]
          ;;
      esac
      ;;

    config)
      local -a config_commands
      config_commands=(
        "path:Print used config path"
      )

      _arguments \
        "1: :{_describe 'config commands' config_commands}" \
        "*:: :->args" \
        $_global_flags[@]

      case $words[1] in
        path)
          _arguments $_all_flags[@]
          ;;
      esac
      ;;

    fmt)
      _arguments \
        {-c,--config}"[Read config from file path]:config path:_files" \
        "--no-config[Don't read config file]" \
        {-E,--enable}"[Enable specific formatter]:formatter:$_formatters" \
        {-d,--diff}"[Display diffs instead of rewriting files]" \
        "--diff-colored[Display diffs instead of rewriting files (with colors)]" \
        "--stdin[Use standard input for piping source files]" \
        \
        $_global_flags[@] \
        "1:files or packages:_files" \
      ;;

    help)
      local -a help_commands
      help_commands=(
        "linters:Help about linters"
      )

      _arguments \
        "1: :{_describe 'help command' help_commands}" \
        "*:: :->args"

      case $words[1] in
        linters)
          _arguments $_all_flags[@]
          ;;
      esac
      ;;

    linters)
      _arguments $_all_flags[@]
      ;;

    run)
      _arguments \
        {-c,--config}"[Read config from file path]:config path:_files" \
        "--no-config[Don't read config file]" \
        "--default[Default set of linters to enable (default \"standard\")]" \
        {-D,--disable}"[Disable specific linter]:linter:$_linters" \
        {-E,--enable}"[Enable specific linter]:linters:$_linters" \
        "--enable-only[Override linters configuration section to only run the specific linter(s)]:linters:$_linters" \
        "--fast-only[Filter enabled linters to run only fast linters]" \
        {-j,--concurrency}"[Number of CPUs to use (Default: Automatically set to match Linux container CPU quota and fall back to the number of logical CPUs in the machine)]:concurrency" \
        "--modules-download-mode[Modules download mode. If not empty, passed as -mod=<mode> to go tools]:module mode" \
        "--issues-exit-code[Exit code when issues were found (default 1)]:exit code" \
        "--build-tags[Build tags]:build tags" \
        "--timeout[Timeout for total work. Disabled by default]:timeout" \
        "--tests[Analyze tests (*_test.go) (default true)]" \
        "--allow-parallel-runners[Allow multiple parallel golangci-lint instances running. If false (default) - golangci-lint acquires file lock on start.]" \
        "--allow-serial-runners[Allow multiple golangci-lint instances running, but serialize them around a lock. If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start.]" \
        "--path-prefix[Path prefix to add to output]:prefix" \
        "--path-mode[Path mode to use (empty, or 'abs')]:path mode" \
        "--show-stats[Show statistics per linter (default true)]" \
        "--output.text.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.text.print-linter-name[Print linter name in the end of issue text. (default true)]" \
        "--output.text.print-issued-lines[Print lines of code with issue. (default true)]" \
        "--output.text.colors[Use colors. (default true)]" \
        "--output.json.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.tab.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.tab.print-linter-name[Print linter name in the end of issue text. (default true)]" \
        "--output.tab.colors[Use colors. (default true)]" \
        "--output.html.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.checkstyle.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.code-climate.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.junit-xml.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.junit-xml.extended[Support extra JUnit XML fields.]" \
        "--output.teamcity.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--output.sarif.path[Output path can be either stdout, stderr or path to the file to write to.]:output path:(stdout stderr)" \
        "--max-issues-per-linter[Maximum issues count per one linter. Set to 0 to disable (default 50)]:issues count" \
        "--max-same-issues[Maximum count of issues with the same text. Set to 0 to disable (default 3)]:Maximum count of issues" \
        "--uniq-by-line[Make issues output unique by line (default true)]" \
        {-n,--new}"[Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.]" \
        "--new-from-rev[Show only new issues created after git revision REV]:revision" \
        "--new-from-patch[Show only new issues created in git patch with file path PATH]:path:_files" \
        "--new-from-merge-base[Show only new issues created after the best common ancestor (merge-base against HEAD)]:base" \
        "--whole-files[Show issues in any part of update files (requires new-from-rev or new-from-patch)]" \
        "--fix[Fix found issues (if it's supported by the linter)]" \
        "--cpu-profile-path[Path to CPU profile output file]:profile output:_files" \
        "--mem-profile-path[Path to memory profile output file]:profile output:_files" \
        "--print-resources-usage[Print avg and max memory usage of golangci-lint and total time]" \
        "--trace-path[Path to trace output file]:profile output:_files" \
        \
        $_global_flags[@] \
        "1:files or packages:_files" \
      ;;

    version)
      _arguments $_global_flags[@]
      ;;
  esac

  return ret
}

_golangci-lint "$*"

# ------------------------------------------------------------------------------
#
# Smart, fast linters runner.
#
# Usage:
#   golangci-lint [flags]
#   golangci-lint [command]
#
# Available Commands:
#   cache       Cache control and information
#   completion  Generate the autocompletion script for the specified shell
#   config      Config file information
#   custom      Build a version of golangci-lint with custom linters
#   fmt         Format Go source files
#   formatters  List current formatters configuration
#   help        Help
#   linters     List current linters configuration
#   migrate     Migrate configuration file from v1 to v2
#   run         Run the linters
#   version     Version
#
# Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#       --version        Print version
#
# Use "golangci-lint [command] --help" for more information about a command.
#
# ------------------------------------------------------------------------------
#
# Cache control and information
#
# Usage:
#   golangci-lint cache [flags]
#   golangci-lint cache [command]
#
# Available Commands:
#   clean       Clean cache
#   status      Show cache status
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# Use "golangci-lint cache [command] --help" for more information about a command.
#
# ------------------------------------------------------------------------------
#
# Config file information
#
# Usage:
#   golangci-lint config [flags]
#   golangci-lint config [command]
#
# Available Commands:
#   path        Print used config path
#   verify      Verify configuration against JSON schema
#
# Flags:
#   -c, --config PATH   Read config from file path PATH
#       --no-config     Don't read config file
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# Use "golangci-lint config [command] --help" for more information about a command.
#
# ------------------------------------------------------------------------------
#
# Print used config path
#
# Usage:
#   golangci-lint config path [flags]
#
# Flags:
#       --json   Display as JSON
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -c, --config PATH    Read config from file path PATH
#   -h, --help           Help for a command
#       --no-config      Don't read config file
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# Verify configuration against JSON schema
#
# Usage:
#   golangci-lint config verify [flags]
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -c, --config PATH    Read config from file path PATH
#   -h, --help           Help for a command
#       --no-config      Don't read config file
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
#
# Build a version of golangci-lint with custom linters
#
# Usage:
#   golangci-lint custom [flags]
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# Format Go source files
#
# Usage:
#   golangci-lint fmt [flags]
#
# Flags:
#   -c, --config PATH      Read config from file path PATH
#       --no-config        Don't read config file
#   -E, --enable strings   Enable specific formatter
#   -d, --diff             Display diffs instead of rewriting files
#       --diff-colored     Display diffs instead of rewriting files (with colors)
#       --stdin            Use standard input for piping source files
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# List current formatters configuration
#
# Usage:
#   golangci-lint formatters [flags]
#
# Flags:
#   -c, --config PATH           Read config from file path PATH
#       --no-config             Don't read config file
#       --default string        Default set of linters to enable (default "standard")
#   -D, --disable strings       Disable specific linter
#   -E, --enable strings        Enable specific linter
#       --enable-only strings   Override linters configuration section to only run the specific linter(s)
#       --fast-only             Filter enabled linters to run only fast linters
#       --json                  Display as JSON
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# List current linters configuration
#
# Usage:
#   golangci-lint linters [flags]
#
# Flags:
#   -c, --config PATH           Read config from file path PATH
#       --no-config             Don't read config file
#       --default string        Default set of linters to enable (default "standard")
#   -D, --disable strings       Disable specific linter
#   -E, --enable strings        Enable specific linter
#       --enable-only strings   Override linters configuration section to only run the specific linter(s)
#       --fast-only             Filter enabled linters to run only fast linters
#       --json                  Display as JSON
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# Migrate configuration file from v1 to v2
#
# Usage:
#   golangci-lint migrate [flags]
#
# Flags:
#   -c, --config PATH       Read config from file path PATH
#       --no-config         Don't read config file
#       --format string     Output file format.
#                           By default, the format of the input configuration file is used.
#                           It can be 'yml', 'yaml', 'toml', or 'json'.
#       --skip-validation   Skip validation of the configuration file against the JSON Schema for v1.
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# Run the linters
#
# Usage:
#   golangci-lint run [flags]
#
# Flags:
#   -c, --config PATH                       Read config from file path PATH
#       --no-config                         Don't read config file
#       --default string                    Default set of linters to enable (default "standard")
#   -D, --disable strings                   Disable specific linter
#   -E, --enable strings                    Enable specific linter
#       --enable-only strings               Override linters configuration section to only run the specific linter(s)
#       --fast-only                         Filter enabled linters to run only fast linters
#   -j, --concurrency int                   Number of CPUs to use (Default: Automatically set to match Linux container CPU quota and fall back to the number of logical CPUs in the machine)
#       --modules-download-mode string      Modules download mode. If not empty, passed as -mod=<mode> to go tools
#       --issues-exit-code int              Exit code when issues were found (default 1)
#       --build-tags strings                Build tags
#       --timeout duration                  Timeout for total work. Disabled by default
#       --tests                             Analyze tests (*_test.go) (default true)
#       --allow-parallel-runners            Allow multiple parallel golangci-lint instances running.
#                                           If false (default) - golangci-lint acquires file lock on start.
#       --allow-serial-runners              Allow multiple golangci-lint instances running, but serialize them around a lock.
#                                           If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start.
#       --path-prefix string                Path prefix to add to output
#       --path-mode string                  Path mode to use (empty, or 'abs')
#       --show-stats                        Show statistics per linter (default true)
#       --output.text.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.text.print-linter-name     Print linter name in the end of issue text. (default true)
#       --output.text.print-issued-lines    Print lines of code with issue. (default true)
#       --output.text.colors                Use colors. (default true)
#       --output.json.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.tab.path stdout            Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.tab.print-linter-name      Print linter name in the end of issue text. (default true)
#       --output.tab.colors                 Use colors. (default true)
#       --output.html.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.checkstyle.path stdout     Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.code-climate.path stdout   Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.junit-xml.path stdout      Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.junit-xml.extended         Support extra JUnit XML fields.
#       --output.teamcity.path stdout       Output path can be either stdout, `stderr` or path to the file to write to.
#       --output.sarif.path stdout          Output path can be either stdout, `stderr` or path to the file to write to.
#       --max-issues-per-linter int         Maximum issues count per one linter. Set to 0 to disable (default 50)
#       --max-same-issues int               Maximum count of issues with the same text. Set to 0 to disable (default 3)
#       --uniq-by-line                      Make issues output unique by line (default true)
#   -n, --new                               Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.
#                                           It's a super-useful option for integration of golangci-lint into existing large codebase.
#                                           It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.
#                                           For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.
#       --new-from-rev REV                  Show only new issues created after git revision REV
#       --new-from-patch PATH               Show only new issues created in git patch with file path PATH
#       --new-from-merge-base string        Show only new issues created after the best common ancestor (merge-base against HEAD)
#       --whole-files                       Show issues in any part of update files (requires new-from-rev or new-from-patch)
#       --fix                               Fix found issues (if it's supported by the linter)
#       --cpu-profile-path string           Path to CPU profile output file
#       --mem-profile-path string           Path to memory profile output file
#       --print-resources-usage             Print avg and max memory usage of golangci-lint and total time
#       --trace-path string                 Path to trace output file
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output
#
# ------------------------------------------------------------------------------
#
# Version
#
# Usage:
#   golangci-lint version [flags]
#
# Flags:
#       --debug   Add build information
#       --json    Display as JSON
#       --short   Display only the version number
#
# Global Flags:
#       --color string   Use color when printing; can be 'always', 'auto', or 'never' (default "auto")
#   -h, --help           Help for a command
#   -v, --verbose        Verbose output

# vim:ft=zsh:et:sts=2:sw=2
