#compdef clang-format

# -----------------------------------------------------------------------------
#
# Copyright 2016, The zsh-completions Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------

_clang-format() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  local -a _llvm_generic_options
  _llvm_generic_options=(
    '--help:Display available options'
    '--help-hidden:Display all available options'
    '--help-list:Display list of available options'
    '--help-list-hidden:Display list of all available options'
    '--print-all-options:Print all option values after command line parsing'
    '--print-options:Print non-default options after command line parsing'
    '--version:Display the version of this program'
  )

  _arguments -C \
    '--Wclang-format-violations[Warnings about individual formatting changes needed. Used only with --dry-run or -n]' \
    '--Werror[If set, changes formatting warnings to errors]' \
    '--Wno-clang-format-violations[Do not warn about individual formatting changes needed. Used only with --dry-run or -n]' \
    '--assume-filename=[Override filename used to determine the language. When reading from stdin, clang-format assumes this filename to determine the language.]:filename:_files' \
    '--cursor=[The position of the cursor when invoking clang-format from an editor integration]:cursor position' \
    {--dry-run,-n}'[If set, do not actually make the formatting changes]' \
    '--dump-config[Dump configuration options to stdout and exit. Can be used with -style option.]' \
    '--fallback-style=[The name of the predefined style used as a fallback in case clang-format is invoked with -style=file, but can not find the .clang-format file to use.]: :->fallbackstyle' \
    '-i[Inplace edit <file>s, if specified.]' \
    '--length=[Format a range of this length (in bytes). Multiple ranges can be formatted by specifying several -offset and -length pairs]:length in byte' \
    "--lines=[format a range of lines (both 1-based). Multiple ranges can be formatted by specifying several -lines arguments.]: :->lines" \
    '--offset=[Format a range starting at this byte offset.Multiple ranges can be formatted by specifying several -offset and -length pairs.]:byte offset' \
    '--output-replacements-xml[Output replacements as XML.]' \
    '--sort-includes[If set, overrides the include sorting behavior determined by the SortIncludes style flag]' \
    '--style=[Coding style. Set coding style or -style=file or set specific parameters]:coding style:->style' \
    '--verbose[If set, shows the list of processed files]' \
    '*:file:_files' \
  && ret=0

  _describe -t llvm_generic_options "LLVM generic options" _llvm_generic_options

  local -a __builtin_styles
  __builtin_styles=(
    'LLVM:LLVM coding standards'
    'Google:Google’s C++ style guide'
    'Chromium:Chromium’s style guide'
    'Mozilla:Mozilla’s style guide'
    'WebKit:WebKit’s style guide'
  )

  case $state in
    (style)
      local -a __based_on_style
      __based_on_style=($__builtin_styles)
      __based_on_style+=('file:local .clang-format style')

      # TODO(zchee): support -style="{BasedOnStyle: llvm, IndentWidth: 8}"
      _describe -t based_on_style "BasedOnStyle" __based_on_style
      ;;

    (fallbackstyle)
      local -a __based_on_style_fallback
      __based_on_style_fallback=($__builtin_styles)
      __based_on_style_fallback+=('none:skip formatting')

      # TODO(zchee): support -style="{BasedOnStyle: llvm, IndentWidth: 8}"
      _describe -t based_on_style "BasedOnStyleFallback" __based_on_style_fallback
      ;;

    (lines)
      if ! compset -P '*:'; then
        _arguments "*:start line"
      else
        _arguments '*:end line'
      fi
      ;;
  esac

  return ret
}

_clang-format "$@"

# -----------------------------------------------------------------------------
# vim:ft=zsh:et:sts=2:sw=2
