#compdef claude

# -----------------------------------------------------------------------------
#
# Copyright 2025, The zsh-completions Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------
#
# https://github.com/anthropics/claude-code
#
# -----------------------------------------------------------------------------

function _claude() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  local -a _commands
  _commands=(
    "config:Manage configuration (eg. claude config set -g theme dark)"
    "mcp:Configure and manage MCP servers"
    "migrate-installer:Migrate from global npm installation to local installation"
    "doctor:Check the health of your Claude Code auto-updater"
    "update:Check for updates and install if available"
  )

  _arguments -C \
    {-d,--debug}"[Enable debug mode]" \
    "(: -)--verbose[Override verbose mode setting from config]" \
    {-p,--print}"[Print response and exit (useful for pipes)]" \
    "(: -)--output-format[Output format]:format:(text json stream-json)" \
    "(: -)--mcp-debug[Enable MCP debug mode (shows MCP server errors)]" \
    "(: -)--dangerously-skip-permissions[Bypass all permission checks]" \
    "(: -)--allowedTools[Comma or space-separated list of tool names to allow (e.g. \"Bash(git*) Edit Replace\")]" \
    {-v,--version}"[output the version number]" \
    {-h,--help}"[display help for command]" \
    \
    "1: :{_describe 'claude commands' _commands}" \
    "*:: :->args" \
    && ret=0

  case $state in
    args)
      case $words[1] in
        (config)
          local -a _config_commands
          _config_commands=(
            "get:Get a config value"
            "set:Set a config value"
            "remove:Remove a config value or items from a config array"
            "rm:Remove a config value or items from a config array"
            "list:List all config values"
            "ls:List all config values"
            "add:Add items to a config array (space or comma separated)"
            "help:display help for command"
          )
          _arguments \
            "1: :{_describe 'claude config commands' _config_commands}" \
            && ret=0

          case $words[2] in
            (get)
              _arguments \
                {-g,--global}"[Use global config]" \
                {-h,--help}"[display help for command]" \
                "*::key" \
                && ret=0
              ;;

            (set)
              _arguments \
                {-g,--global}"[Use global config]" \
                {-h,--help}"[display help for command]" \
                "*::key or value" \
                && ret=0
              ;;

            (remove|rm)
              _arguments \
                {-g,--global}"[Use global config]" \
                {-h,--help}"[display help for command]" \
                "*::key or value" \
                && ret=0
              ;;

            (list|ls)
              _arguments \
                {-g,--global}"[Use global config]" \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (add)
              _arguments \
                {-g,--global}"[Use global config]" \
                {-h,--help}"[display help for command]" \
                "*::key or value" \
                && ret=0
              ;;

            (help)
              _describe 'claude config commands' _config_commands \
              && ret=0
              ;;
          esac
          ;;

        (mcp)
          local -a _mcp_commands
          _mcp_commands=(
            "serve:Start the Claude Code MCP server"
            "add:Add a server (run without arguments for interactive wizard)"
            "remove:Remove an MCP server"
            "list:List configured MCP servers"
            "get:Get details about an MCP server"
            "add-json:Add an MCP server (stdio or SSE) with a JSON string"
            "add-from-claude-desktop:Import MCP servers from Claude Desktop (Mac and WSL only)"
            "reset-project-choices:Reset all approved and rejected project-scoped (.mcp.json) servers within this project"
            "help:display help for command"
          )
          _arguments \
            "1: :{_describe 'claude mcp commands' _mcp_commands}" \
            && ret=0

          case $words[2] in
            (serve)
              _arguments \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (add)
              _arguments \
                {-s,--scope}"[Configuration scope (default: \"local\")]:scope:(local user project)" \
                {-t,--transport}"[Transport type (default: \"stdio\")]:transport:(stdio sse)" \
                {-e,--env}"[Set environment variables (e.g. -e KEY=value)]:envs" \
                {-h,--help}"[display help for command]"
                if (( CURRENT == 3 )); then
                  _arguments "*:name"
                  return
                elif (( CURRENT == 4 )); then
                  _arguments "*:commandOrUrl"
                  return
                else
                  _arguments "*:args $(( $CURRENT - 4 ))"
                  return
                fi
              ;;

            (remove)
              _arguments \
                {-s,--scope}"[Configuration scope (default: \"local\")]:scope:(local user project)" \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (list)
              _arguments \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (get)
              _arguments \
                {-h,--help}"[display help for command]" \
                "*::name" \
                && ret=0
              ;;

            (add-json)
              _arguments \
                {-s,--scope}"[Configuration scope (default: \"local\")]:scope:(local user project)" \
                {-h,--help}"[display help for command]"
                if (( CURRENT == 3 )); then
                  _arguments "*:name"
                  return
                elif (( CURRENT == 4 )); then
                  _arguments "*:json"
                  return
                fi
              ;;

            (add-from-claude-desktop)
              _arguments \
                {-s,--scope}"[Configuration scope (default: \"local\")]:scope:(local user project)" \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (reset-project-choices)
              _arguments \
                {-h,--help}"[display help for command]" \
                && ret=0
              ;;

            (help)
              _describe 'claude mcp commands' _mcp_commands \
              && ret=0
              ;;
          esac
          ;;

        (migrate-installer|doctor|update)
          _arguments \
            {-h,--help}"[display help for command]" \
            && ret=0
          ;;
      esac
      ;;

    (*)
      _arguments "*::prompt:_parameters" \
      && ret=0
      ;;
  esac

  return ret
}

_claude "$*"

# -----------------------------------------------------------------------------
#
# Usage: claude [options] [command] [prompt]
#
# Claude Code - starts an interactive session by default, use -p/--print for
# non-interactive output
#
# Arguments:
#   prompt                          Your prompt
#
# Options:
#   -d, --debug                     Enable debug mode
#   --verbose                       Override verbose mode setting from config
#   -p, --print                     Print response and exit (useful for pipes)
#   --output-format <format>        Output format (only works with --print):
#                                   "text" (default), "json" (single result), or
#                                   "stream-json" (realtime streaming)
#   --json                          [Deprecated: Use --output-format json
#                                   instead] Output JSON in the shape {cost_usd:
#                                   number, duration_ms: number, duration_api_ms:
#                                   number, result: string} (only works with
#                                   --print)
#   --mcp-debug                     Enable MCP debug mode (shows MCP server
#                                   errors)
#   --dangerously-skip-permissions  Bypass all permission checks. Only works in
#                                   Docker containers with no internet access.
#   --allowedTools <tools...>       Comma or space-separated list of tool names
#                                   to allow (e.g. "Bash(git*) Edit Replace")
#   -v, --version                   output the version number
#   -h, --help                      display help for command
#
# Commands:
#   config                          Manage configuration (eg. claude config set
#                                   -g theme dark)
#   mcp                             Configure and manage MCP servers
#   migrate-installer               Migrate from global npm installation to local
#                                   installation
#   doctor                          Check the health of your Claude Code
#                                   auto-updater
#   update                          Check for updates and install if available
#
# -----------------------------------------------------------------------------
#
# Usage: claude config [options] [command]
#
# Manage configuration (eg. claude config set -g theme dark)
#
# Options:
#   -h, --help                             display help for command
#
# Commands:
#   get [options] <key>                    Get a config value
#   set [options] <key> <value>            Set a config value
#   remove|rm [options] <key> [values...]  Remove a config value or items from a config array
#   list|ls [options]                      List all config values
#   add [options] <key> <values...>        Add items to a config array (space or comma separated)
#   help [command]                         display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude config get [options] <key>
#
# Get a config value
#
# Options:
#   -g, --global  Use global config
#   -h, --help    display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude config set [options] <key> <value>
#
# Set a config value
#
# Options:
#   -g, --global  Use global config
#   -h, --help    display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude config remove|rm [options] <key> [values...]
#
# Remove a config value or items from a config array
#
# Options:
#   -g, --global  Use global config
#   -h, --help    display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude config list|ls [options]
#
# List all config values
#
# Options:
#   -g, --global  Use global config (default: false)
#   -h, --help    display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude config add [options] <key> <values...>
#
# Add items to a config array (space or comma separated)
#
# Options:
#   -g, --global  Use global config
#   -h, --help    display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp [options] [command]
#
# Configure and manage MCP servers
#
# Options:
#   -h, --help                                     display help for command
#
# Commands:
#   serve                                          Start the Claude Code MCP server
#   add [options] [name] [commandOrUrl] [args...]  Add a server (run without arguments for interactive wizard)
#   remove [options] <name>                        Remove an MCP server
#   list                                           List configured MCP servers
#   get <name>                                     Get details about an MCP server
#   add-json [options] <name> <json>               Add an MCP server (stdio or SSE) with a JSON string
#   add-from-claude-desktop [options]              Import MCP servers from Claude Desktop (Mac and WSL only)
#   reset-project-choices                          Reset all approved and rejected project-scoped (.mcp.json) servers within this project
#   help [command]                                 display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp serve [options]
#
# Start the Claude Code MCP server
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp add [options] [name] [commandOrUrl] [args...]
#
# Add a server (run without arguments for interactive wizard)
#
# Options:
#   -s, --scope <scope>          Configuration scope (local, user, or project) (default: "local")
#   -t, --transport <transport>  Transport type (stdio, sse) (default: "stdio")
#   -e, --env <env...>           Set environment variables (e.g. -e KEY=value)
#   -h, --help                   display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp remove [options] <name>
#
# Remove an MCP server
#
# Options:
#   -s, --scope <scope>  Configuration scope (local, user, or project) (default: "local")
#   -h, --help           display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp list [options]
#
# List configured MCP servers
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp get [options] <name>
#
# Get details about an MCP server
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp add-json [options] <name> <json>
#
# Add an MCP server (stdio or SSE) with a JSON string
#
# Options:
#   -s, --scope <scope>  Configuration scope (local, user, or project) (default: "local")
#   -h, --help           display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp add-from-claude-desktop [options]
#
# Import MCP servers from Claude Desktop (Mac and WSL only)
#
# Options:
#   -s, --scope <scope>  Configuration scope (local, user, or project) (default: "local")
#   -h, --help           display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude mcp reset-project-choices [options]
#
# Reset all approved and rejected project-scoped (.mcp.json) servers within this project
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude migrate-installer [options]
#
# Migrate from global npm installation to local installation
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude doctor [options]
#
# Check the health of your Claude Code auto-updater
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------
#
# Usage: claude update [options]
#
# Check for updates and install if available
#
# Options:
#   -h, --help  display help for command
#
# -----------------------------------------------------------------------------

# vim:ft=zsh:et:sts=2:sw=2
