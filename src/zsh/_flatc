#compdef flatc

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2016, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/google/flatbuffers@74a25536be1d
#
# -----------------------------------------------------------------------------

function _flatc() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  _arguments -C \
    {-b,--binary}"[Generate wire format binaries for any data definitions]" \
    {-t,--json}"[Generate text output for any data definitions]" \
    {-c,--cpp}"[Generate C++ headers for tables/structs]" \
    {-g,--go}"[Generate Go files for tables/structs]" \
    {-j,--java}"[Generate Java classes for tables/structs]" \
    {-d,--dart}"[Generate Dart classes for tables/structs]" \
    {-T,--ts}"[Generate TypeScript code for tables/structs]" \
    {-n,--csharp}"[Generate C# classes for tables/structs]" \
    {-p,--python}"[Generate Python files for tables/structs]" \
    "--lobster[Generate Lobster files for tables/structs]" \
    {-l,--lua}"[Generate Lua files for tables/structs]" \
    {-r,--rust}"[Generate Rust files for tables/structs]" \
    "--php[Generate PHP files for tables/structs]" \
    "--kotlin[Generate Kotlin classes for tables/structs]" \
    "--jsonschema[Generate Json schema]" \
    "--swift[Generate Swift files for tables/structs]" \
    "-o[Prefix PATH to all generated files.]:path:_files" \
    "-I[[Search for includes in the specified path.]:path:_files" \
    "-M[Print make rules for generated files.]" \
    "--version[Print the version number of flatc and exit.]" \
    {-h,--help}"[Prints this help text and exit.]" \
    "--strict-json[Strict JSON: field names must be / will be quoted, no trailing commas in tables/vectors.]" \
    "--allow-non-utf8[Pass non-UTF-8 input through parser and emit nonstandard \x escapes in JSON. (Default is to raise parse error on non-UTF-8 input.)]" \
    "--natural-utf8[Output strings with UTF-8 as human-readable strings. By default, UTF-8 characters are printed as \uXXXX escapes.]" \
    "--defaults-json[Output fields whose value is the default when writing JSON]" \
    "--unknown-json[Allow fields in JSON that are not defined in the schema. These fields will be discared when generating binaries.]" \
    "--no-prefix[Don't prefix enum values with the enum type in C++.]" \
    "--scoped-enums[Use C++11 style scoped and strongly typed enums. Also implies --no-prefix.]" \
    "--swift-implementation-only[Adds a @_implementationOnly to swift imports]" \
    "--no-includes[Don't generate include statements for included schemas the generated file depends on (C++, Python, Proto-to-Fbs).]" \
    "--gen-mutable[Generate accessors that can mutate buffers in-place.]" \
    "--gen-onefile[Generate a single output file for C#, Go, Java, Kotlin and Python. Implies --no-include.]" \
    "--gen-name-strings[Generate type name functions for C++ and Rust.]" \
    "--gen-object-api[Generate an additional object-based API.]" \
    "--gen-compare[Generate operator== for object-based API types.]" \
    "--gen-nullable[Add Clang _Nullable for C++ pointer. or @Nullable for Java]" \
    "--java-checkerframe[Add @Pure for Java.]" \
    "--gen-generated[Add @Generated annotation for Java.]" \
    "--gen-jvmstatic[Add @JvmStatic annotation for Kotlin methods in companion object for interop from Java to Kotlin.]" \
    "--gen-all[Generate not just code for the current schema files, but for all files it includes as well. If the language uses a single file for output (by default the case for C++ and JS), all code will end up in this one file.]" \
    "--gen-json-emit[Generates encoding code which emits Flatbuffers into JSON]" \
    "--cpp-include[Adds an #include in generated file.]" \
    "--cpp-ptr-type[Set object API pointer type (default std::unique_ptr).]:type" \
    "--cpp-str-type[Set object API string type (default std::string).]:type" \
    "--cpp-str-flex-ctor[Don't construct custom string types by passing std::string from Flatbuffers, but (char* + length).]" \
    "--cpp-field-case-style[Generate C++ fields using selected case style.]:style:(unchanged upper lower)" \
    "--cpp-std=[Generate a C++ code using features of selected C++ standard.]:CPP_STD:->cpp_std" \
    "--cpp-static-reflection[When using C++17, generate extra code to provide compile-time (static) reflection of Flatbuffers types. Requires --cpp-std to be "c++17" or higher.]" \
    "--object-prefix[Customise class prefix for C++ object-based API.]" \
    "--object-suffix[Customise class suffix for C++ object-based API. Default value is "T".]" \
    "--go-namespace[Generate the overrided namespace in Golang.]:overrided namespace" \
    "--go-import[Generate the overrided import for flatbuffers in Golang (default is \"github.com/google/flatbuffers/go\").]" \
    "--raw-binary[Allow binaries without file_indentifier to be read. This may crash flatc given a mismatched schema.]" \
    "--size-prefixed[Input binaries are size prefixed buffers.]" \
    "--proto[Input is a .proto, translate to .fbs.]" \
    "--proto-namespace-suffix=[Add this namespace to any flatbuffers generated from protobufs.]:name suffix" \
    "--oneof-union[Translate .proto oneofs to flatbuffer unions.]" \
    "--grpc[Generate GRPC interfaces for the specified languages.]" \
    "--schema[Serialize schemas instead of JSON (use with -b).]" \
    "--bfbs-filenames[Sets the root path where reflection filenames in reflection.fbs are relative to. The 'root' is denoted with '//']:reflection root" \
    "--bfbs-comments[Add doc comments to the binary schema files.]" \
    "--bfbs-builtins[Add builtin attributes to the binary schema files.]" \
    "--bfbs-gen-embed[Generate code to embed the bfbs schema to the source.]" \
    "--conform=[Specify a schema the following schemas should be an evolution of. Gives errors if not.]:FILE:_files" \
    "--conform-includes[Include path for the schema given with --conform PATH]" \
    "--filename-suffix=[The suffix appended to the generated file names. Default is '_generated'.]:filename suffix" \
    "--filename-ext=[The extension appended to the generated file names. Default is language-specific (e.g., '.h' for C++)]:filename extension" \
    "--include-prefix=[Prefix this path to any generated include statements.]:include prefix" \
    "--keep-prefix[Keep original prefix of schema include statement.]" \
    "--reflect-types[Add minimal type reflection to code generation.]" \
    "--reflect-names[Add minimal type/name reflection.]" \
    "--rust-serialize[Implement serde::Serialize on generated Rust types.]" \
    "--rust-module-root-file[Generate rust code in individual files with a module root file.]" \
    "--root-type=[Select or override the default root_type]:root type" \
    "--require-explicit-ids[When parsing schemas, require explicit ids (id: x).]" \
    "--force-defaults[Emit default values in binary output from JSON]" \
    "--force-empty[When serializing from object API representation, force strings and vectors to empty rather than null.]" \
    "--force-empty-vectors[When serializing from object API representation, force vectors to empty rather than null.]" \
    "--flexbuffers[Used with \"binary\" and \"json\" options, it generates data using schema-less FlexBuffers.]" \
    "--no-warnings[Inhibit all warnings messages.]" \
    "--warnings-as-errors[Treat all warnings as errors.]" \
    "--cs-global-alias[Prepend \"global::\" to all user generated csharp classes and structs.]" \
    "--cs-gen-json-serializer[Allows (de)serialization of JSON text in the Object API. (requires --gen-object-api).]" \
    "--json-nested-bytes[Allow a nested_flatbuffer field to be parsed as a vector of bytesin JSON, which is unsafe unless checked by a verifier afterwards.]" \
    "--ts-flat-files[Only generated one typescript file per .fbs file.]" \
    "--annotate[Annotate the provided BINARY_FILE with the specified SCHEMA file.]:schema" \
    \
    '*:schemas:_files' \
    && ret=0

  case $state in
    (cpp_std)
      local -a cpp_stds
      cpp_stds=(
        'c++0x:generate code compatible with old compilers'
        'c++11:use C++11 code generator \(default\)'
        'c++17:use C++17 features in generated code \(experimental\).'
      )
      _describe 'C++ standard' cpp_stds
      ;;
  esac

  return ret
}

_flatc "$*"

# -----------------------------------------------------------------------------
#
# Usage: flatc [OPTION]... FILE... [-- BINARY_FILE...]
#   -b, --binary           Generate wire format binaries for any data definitions
#   -t, --json             Generate text output for any data definitions
#   -c, --cpp              Generate C++ headers for tables/structs
#   -g, --go               Generate Go files for tables/structs
#   -j, --java             Generate Java classes for tables/structs
#   -d, --dart             Generate Dart classes for tables/structs
#   -T, --ts               Generate TypeScript code for tables/structs
#   -n, --csharp           Generate C# classes for tables/structs
#   -p, --python           Generate Python files for tables/structs
#   --lobster              Generate Lobster files for tables/structs
#   -l, --lua              Generate Lua files for tables/structs
#   -r, --rust             Generate Rust files for tables/structs
#   --php                  Generate PHP files for tables/structs
#   --kotlin               Generate Kotlin classes for tables/structs
#   --jsonschema           Generate Json schema
#   --swift                Generate Swift files for tables/structs
#
#   -o PATH                Prefix PATH to all generated files.
#   -I PATH                Search for includes in the specified path.
#   -M                     Print make rules for generated files.
#   --version              Print the version number of flatc and exit.
#   -h, --help             Prints this help text and exit.
#   --strict-json          Strict JSON: field names must be / will be quoted, no
#                          trailing commas in tables/vectors.
#   --allow-non-utf8       Pass non-UTF-8 input through parser and emit
#                          nonstandard \x escapes in JSON. (Default is to raise
#                          parse error on non-UTF-8 input.)
#   --natural-utf8         Output strings with UTF-8 as human-readable strings. By
#                          default, UTF-8 characters are printed as \uXXXX
#                          escapes.
#   --defaults-json        Output fields whose value is the default when writing
#                          JSON
#   --unknown-json         Allow fields in JSON that are not defined in the
#                          schema. These fields will be discared when generating
#                          binaries.
#   --no-prefix            Don't prefix enum values with the enum type in C++.
#   --scoped-enums         Use C++11 style scoped and strongly typed enums. Also
#                          implies --no-prefix.
#   --swift-implementation-only
#                          Adds a @_implementationOnly to swift imports
#   --gen-inclues          (deprecated), this is the default behavior. If the
#                          original behavior is required (no include statements)
#                          use --no-includes.
#   --no-includes          Don't generate include statements for included schemas
#                          the generated file depends on (C++, Python,
#                          Proto-to-Fbs).
#   --gen-mutable          Generate accessors that can mutate buffers in-place.
#   --gen-onefile          Generate a single output file for C#, Go, Java, Kotlin
#                          and Python. Implies --no-include.
#   --gen-name-strings     Generate type name functions for C++ and Rust.
#   --gen-object-api       Generate an additional object-based API.
#   --gen-compare          Generate operator== for object-based API types.
#   --gen-nullable         Add Clang _Nullable for C++ pointer. or @Nullable for
#                          Java
#   --java-checkerframe    Add @Pure for Java.
#   --gen-generated        Add @Generated annotation for Java.
#   --gen-jvmstatic        Add @JvmStatic annotation for Kotlin methods in
#                          companion object for interop from Java to Kotlin.
#   --gen-all              Generate not just code for the current schema files,
#                          but for all files it includes as well. If the language
#                          uses a single file for output (by default the case for
#                          C++ and JS), all code will end up in this one file.
#   --gen-json-emit        Generates encoding code which emits Flatbuffers into
#                          JSON
#   --cpp-include          Adds an #include in generated file.
#   --cpp-ptr-type T       Set object API pointer type (default std::unique_ptr).
#   --cpp-str-type T       Set object API string type (default std::string).
#                          T::c_str(), T::length() and T::empty() must be
#                          supported. The custom type also needs to be
#                          constructible from std::string (see the
#                          --cpp-str-flex-ctor option to change this behavior)
#   --cpp-str-flex-ctor    Don't construct custom string types by passing
#                          std::string from Flatbuffers, but (char* + length).
#   --cpp-field-case-style STYLE
#                          Generate C++ fields using selected case style.
#                          Supported STYLE values: * 'unchanged' - leave unchanged
#                          (default) * 'upper' - schema snake_case emits
#                          UpperCamel; * 'lower' - schema snake_case emits
#                          lowerCamel.
#   --cpp-std CPP_STD      Generate a C++ code using features of selected C++
#                          standard. Supported CPP_STD values: * 'c++0x' -
#                          generate code compatible with old compilers; 'c++11' -
#                          use C++11 code generator (default); * 'c++17' - use
#                          C++17 features in generated code (experimental).
#   --cpp-static-reflection
#                          When using C++17, generate extra code to provide
#                          compile-time (static) reflection of Flatbuffers types.
#                          Requires --cpp-std to be "c++17" or higher.
#   --object-prefix PREFIX Customize class prefix for C++ object-based API.
#   --object-suffix SUFFIX Customize class suffix for C++ object-based API.
#                          Default Value is "T".
#   --go-namespace         Generate the overriding namespace in Golang.
#   --go-import IMPORT     Generate the overriding import for flatbuffers in
#                          Golang (default is "github.com/google/flatbuffers/go").
#   --raw-binary           Allow binaries without file_identifier to be read. This
#                          may crash flatc given a mismatched schema.
#   --size-prefixed        Input binaries are size prefixed buffers.
#   --proto                Input is a .proto, translate to .fbs.
#   --proto-namespace-suffix SUFFIX
#                          Add this namespace to any flatbuffers generated from
#                          protobufs.
#   --oneof-union          Translate .proto oneofs to flatbuffer unions.
#   --grpc                 Generate GRPC interfaces for the specified languages.
#   --schema               Serialize schemas instead of JSON (use with -b).
#   --bfbs-filenames PATH  Sets the root path where reflection filenames in
#                          reflection.fbs are relative to. The 'root' is denoted
#                          with  `//`. E.g. if PATH=/a/b/c then /a/d/e.fbs will be
#                          serialized as //../d/e.fbs. (PATH defaults to the
#                          directory of the first provided schema file.
#   --bfbs-comments        Add doc comments to the binary schema files.
#   --bfbs-builtins        Add builtin attributes to the binary schema files.
#   --bfbs-gen-embed       Generate code to embed the bfbs schema to the source.
#   --conform FILE         Specify a schema the following schemas should be an
#                          evolution of. Gives errors if not.
#   --conform-includes PATH
#                          Include path for the schema given with --conform PATH
#   --filename-suffix SUFFIX
#                          The suffix appended to the generated file names
#                          (Default is '_generated').
#   --filename-ext EXT     The extension appended to the generated file names.
#                          Default is language-specific (e.g., '.h' for C++)
#   --include-prefix PATH  Prefix this PATH to any generated include statements.
#   --keep-prefix          Keep original prefix of schema include statement.
#   --reflect-types        Add minimal type reflection to code generation.
#   --reflect-names        Add minimal type/name reflection.
#   --rust-serialize       Implement serde::Serialize on generated Rust types.
#   --rust-module-root-file
#                          Generate rust code in individual files with a module
#                          root file.
#   --root-type T          Select or override the default root_type.
#   --require-explicit-ids When parsing schemas, require explicit ids (id: x).
#   --force-defaults       Emit default values in binary output from JSON
#   --force-empty          When serializing from object API representation, force
#                          strings and vectors to empty rather than null.
#   --force-empty-vectors  When serializing from object API representation, force
#                          vectors to empty rather than null.
#   --flexbuffers          Used with "binary" and "json" options, it generates
#                          data using schema-less FlexBuffers.
#   --no-warnings          Inhibit all warnings messages.
#   --warnings-as-errors   Treat all warnings as errors.
#   --cs-global-alias      Prepend "global::" to all user generated csharp classes
#                          and structs.
#   --cs-gen-json-serializer
#                          Allows (de)serialization of JSON text in the Object
#                          API. (requires --gen-object-api).
#   --json-nested-bytes    Allow a nested_flatbuffer field to be parsed as a
#                          vector of bytesin JSON, which is unsafe unless checked
#                          by a verifier afterwards.
#   --ts-flat-files        Only generated one typescript file per .fbs file.
#   --annotate SCHEMA      Annotate the provided BINARY_FILE with the specified
#                          SCHEMA file.
#
# FILEs may be schemas (must end in .fbs), binary schemas (must end in .bfbs) or
# JSON files (conforming to preceding schema). BINARY_FILEs after the -- must be
# binary flatbuffer format files. Output files are named using the base file name
# of the input, and written to the current directory or the path given by -o.
# example: flatc -c -b schema1.fbs schema2.fbs data.json
#
# -----------------------------------------------------------------------------
# vim:ft=zsh:et:sts=2:sw=2
