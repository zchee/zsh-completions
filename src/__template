#compdef $BIN

# -----------------------------------------------------------------------------
#
# Copyright 2025, The zsh-completions Authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# -----------------------------------------------------------------------------
#
# github.com/foo/bar
#
# -----------------------------------------------------------------------------

function _$BIN() {
  local context curcontext=$curcontext state line expl ret=1
  declare -A opt_args

  local -a _commands
  _commands=(
    "subcommand1:description1"
    "subcommand2:description2"
    "subcommand3:description3"
  )

  _arguments -C \
    "1: :{_describe '$BIN commands' _commands}" \
    "*:: :->args" \
    \
    '*:(ext) files:_path_files -g "**/*.ext(-.)"' \
    && ret=0

  local _global_flags flags="--help"
  global_flags=("(: -)--help[Help for $words[1]]")

  case $state in
    args)
      if (( CURRENT == 2 )); then
        _arguments "*:after the (( CURRENT == 2 )) comment:"
        return
      fi
      _arguments "*:before the (( CURRENT == 2 )) comment:_files"

      case $words[1] in
        subcommand1)
          _arguments \
            $global_flags \
            "($flags)-bar[subcommand2 -bar argument]" \
            "($flags)-baz[subcommand2 -baz argument]" \
            "($flags -q -qux)"{-q,-qux}"[subcommand2 -bar argument comment]" \
            "($flags -)*:devices:_devices" \
            && ret=0
          ;;

        subcommand2)
          _arguments \
            $global_flags \
            "($flags)-foo[subcommand1 -foo argument]" \
            "($flags -)*:file:_files" \
            && ret=0
          ;;

        help)
          local -a topics
          topics=(
            "buildconstraint:build constraints"
            "buildmode:build modes"
            "c:calling between Go and C"
            "cache:build and test caching"
            "environment:environment variables"
            "filetype:file types"
            "go.mod:the go.mod file"
            "gopath:GOPATH environment variable"
            "gopath-get:legacy GOPATH go get"
            "goproxy:module proxy protocol"
            "importpath:import path syntax"
            "modules:modules, module versions, and more"
            "module-get:module-aware go get"
            "module-auth:module authentication using go.sum"
            "module-private:module configuration for non-public modules"
            "packages:package lists and patterns"
            "testflag:testing flags"
            "testfunc:testing functions"
          )
          _arguments "1: :{_describe 'command' _commands -- topics}"
          ;;

      esac
      ;;
  esac

  return ret
}

_$BIN "$*"

# -----------------------------------------------------------------------------
#

#
# -----------------------------------------------------------------------------
 
# vim:ft=zsh:et:sts=2:sw=2
